{"version":3,"sources":["Coin.js","CoinContainer.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Coin","className","src","this","props","info","imgSrc","alt","side","Component","CoinContainer","state","currCoin","nFlips","nHeads","nTails","handleClick","bind","arr","newCoin","coins","Math","floor","random","length","setState","st","e","flipCoin","variant","onClick","React","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAGMA,E,iLAEE,OAAQ,yBAAKC,UAAU,QACnB,yBAAKC,IAAKC,KAAKC,MAAMC,KAAKC,OAAQC,IAAMJ,KAAKC,MAAMC,KAAKG,Y,GAHjDC,a,yBCEbC,E,YAQN,WAAYN,GAAO,IAAD,8BACjB,4CAAMA,KACDO,MAAM,CACTC,SAAS,KACTC,OAAO,EACPC,OAAO,EACPC,OAAO,GAET,EAAKC,YAAa,EAAKA,YAAYC,KAAjB,gBARD,E,wEAWlB,ICxBgBC,EDwBVC,GCxBUD,EDwBOf,KAAKC,MAAMgB,OCvBbC,KAAKC,MAAMD,KAAKE,SAASL,EAAIM,SDwBlDrB,KAAKsB,UAAS,SAAAC,GACX,MAAM,CACFd,SAASO,EACTN,OAAOa,EAAGb,OAAS,EACnBC,OAAOY,EAAGZ,QAAyB,UAAfK,EAAQX,KAAiB,EAAG,GAChDO,OAAOW,EAAGX,QAAyB,UAAfI,EAAQX,KAAiB,EAAG,S,kCAI3CmB,GACZxB,KAAKyB,a,+BAGD,OAAO,yBAAK3B,UAAU,kBAClB,wBAAIA,UAAU,QAAd,kBAGA,6BACA,kBAAC,IAAD,CAAQA,UAAU,SAAS4B,QAAQ,YAAWC,QAAS3B,KAAKa,aAA5D,mBACFb,KAAKQ,MAAMC,UAAY,kBAAC,EAAD,CAAOP,KAAOF,KAAKQ,MAAMC,WACjD,6BACG,sCAAYT,KAAKQ,MAAME,OAAvB,2BAAuDV,KAAKQ,MAAMG,OAAlE,cAAqFX,KAAKQ,MAAMI,OAAhG,UACJ,wBAAId,UAAU,OAAd,kC,GA1CwB8B,IAAMtB,WAA5BC,EACGsB,aAAc,CACnBZ,MAAM,CACL,CAACZ,KAAK,QAAQF,OAAO,YAErB,CAACE,KAAK,QAAQF,OAAO,cA6CXI,QE1CAuB,G,uLAPb,OACE,yBAAKhC,UAAU,OACnB,kBAAC,EAAD,W,GAJkB8B,IAAMtB,YCQJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8cc54c52.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Coin.css'\r\n\r\nclass Coin extends Component{\r\n    render(){\r\n        return (<div className=\"coin\">\r\n            <img src={this.props.info.imgSrc} alt ={this.props.info.side}/>\r\n            </div>)\r\n    }\r\n}\r\nexport   {Coin} ","import React from 'react'\r\nimport {choice} from './helpers'\r\nimport {Coin} from './Coin'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nclass CoinContainer extends React.Component{\r\n  static defaultProps ={\r\n    coins:[\r\n     {side:'heads',imgSrc:\"head.jpg\"\r\n   },\r\n     {side:'tails',imgSrc:\"tail.jpg\"}\r\n    ]\r\n   }\r\nconstructor(props){\r\n super(props)\r\n this.state={\r\n   currCoin:null,\r\n   nFlips:0,\r\n   nHeads:0,\r\n   nTails:0\r\n }\r\n this.handleClick= this.handleClick.bind(this)\r\n}\r\nflipCoin(){\r\nconst newCoin = choice(this.props.coins)\r\nthis.setState(st=>{ \r\n   return{\r\n       currCoin:newCoin,\r\n       nFlips:st.nFlips + 1,\r\n       nHeads:st.nHeads + (newCoin.side===\"heads\" ? 1 :0),\r\n       nTails:st.nTails + (newCoin.side===\"tails\" ? 1 :0)\r\n   }\r\n})\r\n}\r\nhandleClick(e){\r\nthis.flipCoin()\r\n}\r\nrender(){\r\n    return(<div className=\"CoinCointainer\">\r\n        <h1 className=\"head\">\r\n            Flip the Coin! \r\n        </h1>\r\n        <hr></hr>\r\n        <Button className=\"button\" variant=\"secondary\"onClick={this.handleClick}>Flip the coin!!</Button>\r\n     {this.state.currCoin && <Coin  info ={this.state.currCoin}/>}\r\n     <hr></hr>\r\n        <h2>Out of {this.state.nFlips} flips, there have been {this.state.nHeads} heads and {this.state.nTails} tails</h2>\r\n    <h2 className=\"end\"> \r\n      ~ Created by Evu Paulus ~\r\n    </h2>\r\n    </div>)\r\n    \r\n\r\n}\r\n}\r\nexport default CoinContainer","function choice(arr){\r\n    let randomIndex= Math.floor(Math.random()*arr.length)\r\n    return arr[randomIndex]\r\n\r\n}\r\nexport {choice}","import React, {Component} from 'react'\nimport CoinCointainer from './CoinContainer'\nimport './App.css'\n\nclass App extends React.Component{\nrender(){\n  return(\n    <div className=\"App\"> \n<CoinCointainer/>\n    </div>\n  )\n}\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}